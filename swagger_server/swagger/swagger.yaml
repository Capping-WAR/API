---
swagger: "2.0"
info:
  description: "A REST API to enable all interactions of the Marist Writing Advisor\
    \ Reviewer tool."
  version: "0.0.1"
  title: "WAR API"
  contact:
    email: "Daniel.Gisolfi1@marist.edu"
host: "war.marist.ai"
basePath: "/api/v1"
schemes:
- "https"
- "http"
paths:
  /reviewers:
    get:
      tags:
      - "Reviewer"
      summary: "Get all Reviewers"
      operationId: "get_reviewers"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Reviewers successfully retrieved"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/reviewer"
        "400":
          description: "Reviewers retrieval error"
          schema:
            $ref: "#/definitions/request_info"
      x-swagger-router-controller: "swagger_server.controllers.reviewer_controller"
  /reviewer:
    post:
      tags:
      - "Reviewer"
      summary: "Add a Reviewer"
      operationId: "add_reviewer"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "reviewer"
        description: "Reviewer to be added"
        required: true
        schema:
          $ref: "#/definitions/reviewer"
      responses:
        "201":
          description: "Reviewer successfully added"
        "400":
          description: "Reviewer add error"
          schema:
            $ref: "#/definitions/request_info"
      x-swagger-router-controller: "swagger_server.controllers.reviewer_controller"
  /reviewer/{reviewerID}:
    get:
      tags:
      - "Reviewer"
      summary: "Get a Reviewer by ID"
      operationId: "get_reviewer_by_id"
      produces:
      - "application/json"
      parameters:
      - name: "reviewerID"
        in: "path"
        description: "ID of Reviewer"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Reviewer successfully retrieved"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/reviewer"
        "400":
          description: "Reviewer retrieval error"
          schema:
            $ref: "#/definitions/request_info"
        "404":
          description: "Reviewer does not exist"
      x-swagger-router-controller: "swagger_server.controllers.reviewer_controller"
    put:
      tags:
      - "Reviewer"
      summary: "Update a Reviewer"
      operationId: "update_reviewer"
      produces:
      - "application/json"
      parameters:
      - name: "reviewerID"
        in: "path"
        description: "ID of Reviewer"
        required: true
        type: "integer"
      - in: "body"
        name: "reviewer"
        description: "New Version of the Reviewer"
        required: true
        schema:
          $ref: "#/definitions/reviewer"
      responses:
        "200":
          description: "Reviewer successfully updated"
        "400":
          description: "Reviewer update error"
          schema:
            $ref: "#/definitions/request_info"
        "404":
          description: "Reviewer does not exist"
      x-swagger-router-controller: "swagger_server.controllers.reviewer_controller"
    delete:
      tags:
      - "Reviewer"
      summary: "Delete a Reviewer"
      operationId: "delete_reviewer"
      parameters:
      - name: "reviewerID"
        in: "path"
        description: "ID of Reviewer"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Reviewer successfully deleted"
        "400":
          description: "Reviewer delete error"
          schema:
            $ref: "#/definitions/request_info"
        "404":
          description: "Reviewer does not exist"
      x-swagger-router-controller: "swagger_server.controllers.reviewer_controller"
  /reviews:
    get:
      tags:
      - "People Review"
      summary: "Get all People Reviews"
      operationId: "get_people_reviews"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "People Reviews successfully retrieved"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/people_review"
        "400":
          description: "People Reviews retrieval error"
          schema:
            $ref: "#/definitions/request_info"
      x-swagger-router-controller: "swagger_server.controllers.people_review_controller"
  /review:
    post:
      tags:
      - "People Review"
      summary: "Add a People Review"
      operationId: "add_people_review"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "people_review"
        description: "People Review to be added"
        required: true
        schema:
          $ref: "#/definitions/people_review"
      responses:
        "201":
          description: "People Review successfully added"
        "400":
          description: "People Review add error"
          schema:
            $ref: "#/definitions/request_info"
      x-swagger-router-controller: "swagger_server.controllers.people_review_controller"
  /review/{sentenceID}:
    get:
      tags:
      - "People Review"
      summary: "Get a People Review by ID"
      operationId: "get_people_review_by_id"
      produces:
      - "application/json"
      parameters:
      - name: "sentenceID"
        in: "path"
        description: "ID of Sentence"
        required: true
        type: "integer"
      responses:
        "200":
          description: "People Review successfully retrieved"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/people_review"
        "400":
          description: "People Review retrieval error"
          schema:
            $ref: "#/definitions/request_info"
        "404":
          description: "Review does not exist"
      x-swagger-router-controller: "swagger_server.controllers.people_review_controller"
    put:
      tags:
      - "People Review"
      summary: "Update a People Review"
      operationId: "update_people_review"
      produces:
      - "application/json"
      parameters:
      - name: "sentenceID"
        in: "path"
        description: "ID of sentence"
        required: true
        type: "integer"
      - in: "body"
        name: "people_review"
        description: "New Version of the People Review"
        required: true
        schema:
          $ref: "#/definitions/people_review"
      responses:
        "200":
          description: "People Review successfully updated"
        "400":
          description: "People Review update error"
          schema:
            $ref: "#/definitions/request_info"
        "404":
          description: "People Review does not exist"
      x-swagger-router-controller: "swagger_server.controllers.people_review_controller"
    delete:
      tags:
      - "People Review"
      summary: "Delete a People Review"
      operationId: "delete_people_review"
      parameters:
      - name: "sentenceID"
        in: "path"
        description: "ID of sentence"
        required: true
        type: "integer"
      responses:
        "200":
          description: "People Review successfully deleted"
        "400":
          description: "People Review delete error"
          schema:
            $ref: "#/definitions/request_info"
        "404":
          description: "People Review does not exist"
      x-swagger-router-controller: "swagger_server.controllers.people_review_controller"
  /sentences:
    get:
      tags:
      - "Sentence"
      summary: "Get all Sentences"
      operationId: "get_sentences"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Sentences successfully retrieved"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/sentence"
        "400":
          description: "Sentences retrieval error"
          schema:
            $ref: "#/definitions/request_info"
      x-swagger-router-controller: "swagger_server.controllers.sentence_controller"
  /sentence:
    post:
      tags:
      - "Sentence"
      summary: "Add a Sentence"
      operationId: "add_sentence"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "sentence"
        description: "Sentence to be added"
        required: true
        schema:
          $ref: "#/definitions/sentence"
      responses:
        "201":
          description: "Sentence successfully added"
        "400":
          description: "Sentence add error"
          schema:
            $ref: "#/definitions/request_info"
      x-swagger-router-controller: "swagger_server.controllers.sentence_controller"
  /sentence/{sentenceID}:
    get:
      tags:
      - "Sentence"
      summary: "Get a Sentence by ID"
      operationId: "get_sentence_by_id"
      produces:
      - "application/json"
      parameters:
      - name: "sentenceID"
        in: "path"
        description: "ID of Sentence"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Sentence successfully retrieved"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/sentence"
        "400":
          description: "Sentence retrieval error"
          schema:
            $ref: "#/definitions/request_info"
        "404":
          description: "Sentence does not exist"
      x-swagger-router-controller: "swagger_server.controllers.sentence_controller"
    put:
      tags:
      - "Sentence"
      summary: "Update a Sentence"
      operationId: "update_sentence"
      produces:
      - "application/json"
      parameters:
      - name: "sentenceID"
        in: "path"
        description: "ID of Sentence"
        required: true
        type: "integer"
      - in: "body"
        name: "sentence"
        description: "New Version of the Sentence"
        required: true
        schema:
          $ref: "#/definitions/sentence"
      responses:
        "200":
          description: "Sentence successfully updated"
        "400":
          description: "Sentence update error"
          schema:
            $ref: "#/definitions/request_info"
        "404":
          description: "Sentence does not exist"
      x-swagger-router-controller: "swagger_server.controllers.sentence_controller"
    delete:
      tags:
      - "Sentence"
      summary: "Delete a Sentence"
      operationId: "delete_sentence"
      parameters:
      - name: "sentenceID"
        in: "path"
        description: "ID of Sentence"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Sentence successfully deleted"
        "400":
          description: "Sentence delete error"
          schema:
            $ref: "#/definitions/request_info"
        "404":
          description: "Sentence does not exist"
      x-swagger-router-controller: "swagger_server.controllers.sentence_controller"
  /TrainingDataset:
    get:
      tags:
      - "Training Dataset"
      summary: "Get all Data Entries"
      operationId: "get_data_entrys"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Data Entries successfully retrieved"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/dataEntry"
        "400":
          description: "Data Entries retrieval error"
          schema:
            $ref: "#/definitions/request_info"
      x-swagger-router-controller: "swagger_server.controllers.training_dataset_controller"
    post:
      tags:
      - "Training Dataset"
      summary: "Add a Data Entry"
      operationId: "add_data_entry"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "dataEntry"
        description: "dataEntry to be added"
        required: true
        schema:
          $ref: "#/definitions/dataEntry"
      responses:
        "201":
          description: "Data Entry successfully added"
        "400":
          description: "Data Entry add error"
          schema:
            $ref: "#/definitions/request_info"
      x-swagger-router-controller: "swagger_server.controllers.training_dataset_controller"
  /TrainingDataset/{sentenceID}:
    get:
      tags:
      - "Training Dataset"
      summary: "Get a Data Entry by ID"
      operationId: "get_data_entry_by_id"
      produces:
      - "application/json"
      parameters:
      - name: "sentenceID"
        in: "path"
        description: "sentenceID of Data Entry"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Data Entry successfully retrieved"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/dataEntry"
        "400":
          description: "Data Entry retrieval error"
          schema:
            $ref: "#/definitions/request_info"
        "404":
          description: "Data Entry does not exist"
      x-swagger-router-controller: "swagger_server.controllers.training_dataset_controller"
    put:
      tags:
      - "Training Dataset"
      summary: "Update a Data Entry"
      operationId: "update_data_entry"
      produces:
      - "application/json"
      parameters:
      - name: "sentenceID"
        in: "path"
        description: "sentenceID of Data Entry"
        required: true
        type: "integer"
      - in: "body"
        name: "dataEntry"
        description: "New Version of the Data Entry"
        required: true
        schema:
          $ref: "#/definitions/dataEntry"
      responses:
        "200":
          description: "Data Entry successfully updated"
        "400":
          description: "Data Entry update error"
          schema:
            $ref: "#/definitions/request_info"
        "404":
          description: "Data Entry does not exist"
      x-swagger-router-controller: "swagger_server.controllers.training_dataset_controller"
    delete:
      tags:
      - "Training Dataset"
      summary: "Delete a Data Entry"
      operationId: "delete_data_entry"
      parameters:
      - name: "sentenceID"
        in: "path"
        description: "sentenceID of Data Entry"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Data Entry successfully deleted"
        "400":
          description: "Data Entry delete error"
          schema:
            $ref: "#/definitions/request_info"
        "404":
          description: "Data Entry does not exist"
      x-swagger-router-controller: "swagger_server.controllers.training_dataset_controller"
  /models:
    get:
      tags:
      - "Models"
      summary: "Get all Models"
      operationId: "get_models"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Models successfully retrieved"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/model"
        "400":
          description: "Models retrieval error"
          schema:
            $ref: "#/definitions/request_info"
      x-swagger-router-controller: "swagger_server.controllers.models_controller"
  /model:
    post:
      tags:
      - "Models"
      summary: "Add a Model"
      operationId: "add_model"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "Model"
        description: "Model to be added"
        required: true
        schema:
          $ref: "#/definitions/model"
      responses:
        "201":
          description: "Model successfully added"
        "400":
          description: "Model add error"
          schema:
            $ref: "#/definitions/request_info"
      x-swagger-router-controller: "swagger_server.controllers.models_controller"
  /model/{modelID}:
    get:
      tags:
      - "Models"
      summary: "Get a model version by modelID"
      operationId: "get_model_by_id"
      produces:
      - "application/json"
      parameters:
      - name: "modelID"
        in: "path"
        description: "ID of Model"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Model successfully retrieved"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/model"
        "400":
          description: "Model retrieval error"
          schema:
            $ref: "#/definitions/request_info"
        "404":
          description: "Model does not exist"
      x-swagger-router-controller: "swagger_server.controllers.models_controller"
    put:
      tags:
      - "Models"
      summary: "Update a Model"
      operationId: "update_model"
      produces:
      - "application/json"
      parameters:
      - name: "modelID"
        in: "path"
        description: "ID of Model"
        required: true
        type: "integer"
      - in: "body"
        name: "Model"
        description: "Updated Model"
        required: true
        schema:
          $ref: "#/definitions/model"
      responses:
        "200":
          description: "Model successfully updated"
        "400":
          description: "Model update error"
          schema:
            $ref: "#/definitions/request_info"
        "404":
          description: "Model does not exist"
      x-swagger-router-controller: "swagger_server.controllers.models_controller"
    delete:
      tags:
      - "Models"
      summary: "Delete a Model"
      operationId: "delete_model"
      parameters:
      - name: "modelID"
        in: "path"
        description: "ID of Model"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Model successfully deleted"
        "400":
          description: "Model delete error"
          schema:
            $ref: "#/definitions/request_info"
        "404":
          description: "Model does not exist"
      x-swagger-router-controller: "swagger_server.controllers.models_controller"
  /rules:
    get:
      tags:
      - "Rules"
      summary: "Get all Rules"
      operationId: "get_rules"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Rules successfully retrieved"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/rule"
        "400":
          description: "Rules retrieval error"
          schema:
            $ref: "#/definitions/request_info"
      x-swagger-router-controller: "swagger_server.controllers.rules_controller"
  /rule:
    post:
      tags:
      - "Rules"
      summary: "Add a Rule"
      operationId: "add_rule"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "Rule"
        description: "Rule to be added"
        required: true
        schema:
          $ref: "#/definitions/rule"
      responses:
        "201":
          description: "Rule successfully added"
        "400":
          description: "Rule add error"
          schema:
            $ref: "#/definitions/request_info"
      x-swagger-router-controller: "swagger_server.controllers.rules_controller"
  /rule/{ruleID}:
    get:
      tags:
      - "Rules"
      summary: "Get a Rule by ruleID"
      operationId: "get_rule_by_id"
      produces:
      - "application/json"
      parameters:
      - name: "ruleID"
        in: "path"
        description: "ID of Rule"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Rule successfully retrieved"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/rule"
        "400":
          description: "Rule retrieval error"
          schema:
            $ref: "#/definitions/request_info"
        "404":
          description: "Rule does not exist"
      x-swagger-router-controller: "swagger_server.controllers.rules_controller"
    put:
      tags:
      - "Rules"
      summary: "Update a Rule"
      operationId: "update_rule"
      produces:
      - "application/json"
      parameters:
      - name: "ruleID"
        in: "path"
        description: "ID of Rule"
        required: true
        type: "integer"
      - in: "body"
        name: "Rule"
        description: "Updated Rule"
        required: true
        schema:
          $ref: "#/definitions/rule"
      responses:
        "200":
          description: "Rule successfully updated"
        "400":
          description: "Rule update error"
          schema:
            $ref: "#/definitions/request_info"
        "404":
          description: "Rule does not exist"
      x-swagger-router-controller: "swagger_server.controllers.rules_controller"
    delete:
      tags:
      - "Rules"
      summary: "Delete a Rule"
      operationId: "delete_rule"
      parameters:
      - name: "ruleID"
        in: "path"
        description: "ID of Rule"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Rule successfully deleted"
        "400":
          description: "Rule delete error"
          schema:
            $ref: "#/definitions/request_info"
        "404":
          description: "Rule does not exist"
      x-swagger-router-controller: "swagger_server.controllers.rules_controller"
  /modelReviews:
    get:
      tags:
      - "Model Reviews"
      summary: "Get all Model Reviews"
      operationId: "get_model_reviews"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Model Reviews successfully retrieved"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/model_review"
        "400":
          description: "Model Reviews retrieval error"
          schema:
            $ref: "#/definitions/request_info"
      x-swagger-router-controller: "swagger_server.controllers.model_reviews_controller"
  /modelReview:
    post:
      tags:
      - "Model Reviews"
      summary: "Add a Model Review"
      operationId: "add_model_review"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "model_review"
        description: "Model Review to be added"
        required: true
        schema:
          $ref: "#/definitions/model_review"
      responses:
        "201":
          description: "Model Review successfully added"
        "400":
          description: "Model Review add error"
          schema:
            $ref: "#/definitions/request_info"
      x-swagger-router-controller: "swagger_server.controllers.model_reviews_controller"
  /modelReview/{sentenceID}:
    get:
      tags:
      - "Model Reviews"
      summary: "Get a Rule by sentenceID"
      operationId: "get_model_review_by_id"
      produces:
      - "application/json"
      parameters:
      - name: "sentenceID"
        in: "path"
        description: "sentence ID of review"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Model Review successfully retrieved"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/model_review"
        "400":
          description: "Model Review retrieval error"
          schema:
            $ref: "#/definitions/request_info"
        "404":
          description: "Model Review does not exist"
      x-swagger-router-controller: "swagger_server.controllers.model_reviews_controller"
    put:
      tags:
      - "Model Reviews"
      summary: "Update a Model Review"
      operationId: "update_model_review"
      produces:
      - "application/json"
      parameters:
      - name: "sentenceID"
        in: "path"
        description: "sentence ID of review"
        required: true
        type: "integer"
      - in: "body"
        name: "Model_Review"
        description: "Updated Model Review"
        required: true
        schema:
          $ref: "#/definitions/model_review"
      responses:
        "200":
          description: "Model Review successfully updated"
        "400":
          description: "Model Review update error"
          schema:
            $ref: "#/definitions/request_info"
        "404":
          description: "Model Review does not exist"
      x-swagger-router-controller: "swagger_server.controllers.model_reviews_controller"
    delete:
      tags:
      - "Model Reviews"
      summary: "Delete a Model Review"
      operationId: "delete_model_review"
      parameters:
      - name: "sentenceID"
        in: "path"
        description: "sentence ID of review"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Model Review successfully deleted"
        "400":
          description: "Model Review delete error"
          schema:
            $ref: "#/definitions/request_info"
        "404":
          description: "Model Review does not exist"
      x-swagger-router-controller: "swagger_server.controllers.model_reviews_controller"
  /sentenceRules:
    get:
      tags:
      - "Sentence Rules"
      summary: "Get all Sentence Rules"
      operationId: "get_sentence_rules"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Sentence Rules successfully retrieved"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/sentence_rule"
        "400":
          description: "Sentence Rules retrieval error"
          schema:
            $ref: "#/definitions/request_info"
      x-swagger-router-controller: "swagger_server.controllers.sentence_rules_controller"
  /sentenceRule:
    post:
      tags:
      - "Sentence Rules"
      summary: "Add a Sentence Rule"
      operationId: "add_sentence_rule"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "sentence_rule"
        description: "Sentence Rule to be added"
        required: true
        schema:
          $ref: "#/definitions/sentence_rule"
      responses:
        "201":
          description: "Sentence Rule successfully added"
        "400":
          description: "Sentence Rule add error"
          schema:
            $ref: "#/definitions/request_info"
      x-swagger-router-controller: "swagger_server.controllers.sentence_rules_controller"
  /sentenceRule/{sentenceID}:
    get:
      tags:
      - "Sentence Rules"
      summary: "Get a Sentence Rule by sentenceID"
      operationId: "get_sentence_rule_by_id"
      produces:
      - "application/json"
      parameters:
      - name: "sentenceID"
        in: "path"
        description: "sentence ID of Sentence Rule"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Sentence Rule successfully retrieved"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/sentence_rule"
        "400":
          description: "Sentence Rule retrieval error"
          schema:
            $ref: "#/definitions/request_info"
        "404":
          description: "Sentence Rule does not exist"
      x-swagger-router-controller: "swagger_server.controllers.sentence_rules_controller"
    put:
      tags:
      - "Sentence Rules"
      summary: "Update a Sentence Rule"
      operationId: "update_sentence_rule"
      produces:
      - "application/json"
      parameters:
      - name: "sentenceID"
        in: "path"
        description: "sentence ID of Sentence Rule"
        required: true
        type: "integer"
      - in: "body"
        name: "sentence_rule"
        description: "Updated Sentence Rule"
        required: true
        schema:
          $ref: "#/definitions/sentence_rule"
      responses:
        "200":
          description: "Sentence Rule successfully updated"
        "400":
          description: "Sentence Rule update error"
          schema:
            $ref: "#/definitions/request_info"
        "404":
          description: "Sentence Rule does not exist"
      x-swagger-router-controller: "swagger_server.controllers.sentence_rules_controller"
    delete:
      tags:
      - "Sentence Rules"
      summary: "Delete a Sentence Rule"
      operationId: "delete_sentence_rule"
      parameters:
      - name: "sentenceID"
        in: "path"
        description: "sentence ID of Sentence Rule"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Sentence Rule successfully deleted"
        "400":
          description: "Sentence Rule delete error"
          schema:
            $ref: "#/definitions/request_info"
        "404":
          description: "Sentence Rule does not exist"
      x-swagger-router-controller: "swagger_server.controllers.sentence_rules_controller"
  /search:
    post:
      tags:
      - "Utils"
      summary: "Runs a given SELECT Query"
      operationId: "get_search_results"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "query"
        description: "Query to be run"
        required: true
        schema:
          $ref: "#/definitions/query"
      responses:
        "200":
          description: "Search Results successfully retrieved"
          schema:
            type: "array"
            items: {}
        "400":
          description: "Search Results retrieval error"
          schema:
            $ref: "#/definitions/request_info"
      x-swagger-router-controller: "swagger_server.controllers.utils_controller"
  /retrain:
    post:
      tags:
      - "Utils"
      summary: "checks for new entries in the traning data set table and sends a request\
        \ to train a new model if one is found"
      operationId: "post_retrain"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "retrain_info"
        description: "Who is calling this retrain?"
        required: true
        schema:
          $ref: "#/definitions/retrain_info"
      responses:
        "200":
          description: "No new entries found"
        "201":
          description: "New entry found, retrian called"
        "400":
          description: "retrain error"
          schema:
            $ref: "#/definitions/request_info"
      x-swagger-router-controller: "swagger_server.controllers.utils_controller"
  /threads:
    get:
      tags:
      - "Utils"
      summary: "gets all running threads from AI API"
      operationId: "get_threads"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Threads Retrieved"
        "400":
          description: "threads retrival error"
          schema:
            $ref: "#/definitions/request_info"
      x-swagger-router-controller: "swagger_server.controllers.utils_controller"
  /statistics/userStats:
    post:
      tags:
      - "Site Statistics"
      summary: "updates current user statistics count"
      operationId: "post_user_stats"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "user_info"
        description: "Which os and platform is the user on."
        required: true
        schema:
          $ref: "#/definitions/user_info"
      responses:
        "200":
          description: "User Stats updated"
        "400":
          description: "update/insert error"
          schema:
            $ref: "#/definitions/request_info"
      x-swagger-router-controller: "swagger_server.controllers.site_statistics_controller"
  /statistics/loginStats:
    post:
      tags:
      - "Site Statistics"
      summary: "updates current login statistics count"
      operationId: "post_login_stats"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Login Stats updated"
        "400":
          description: "update/insert error"
          schema:
            $ref: "#/definitions/request_info"
      x-swagger-router-controller: "swagger_server.controllers.site_statistics_controller"
definitions:
  model:
    required:
    - "balAccuracy"
    - "dateAdded"
    - "isActive"
    - "modelVersion"
    - "ruleId"
    properties:
      modelID:
        type: "integer"
        example: 1
        description: "Unique ID of the model"
      modelVersion:
        type: "string"
        example: "THE_GOOD_ONE"
        description: "Version of the model"
      balAccuracy:
        type: "number"
        example: 99
        description: "Percentage Accuracy of the model"
      isActive:
        type: "boolean"
        example: true
        description: "is the current model in use for a given rule"
      dateAdded:
        type: "string"
        example: "2019-09-24 22:33:19.000"
        description: "Date added to the database"
      ruleId:
        type: "integer"
        example: 1
        description: "The Rule ID for the corresponding rule in the rules table"
    example:
      modelID: 1
      modelVersion: "TEST"
      balAccuracy: 99
      isActive: true
      dateAdded: "2019-09-24 22:33:19.000"
      ruleID: 1
  request_info:
    properties:
      status_code:
        type: "integer"
        example: 404
        description: "HTTP Status Code"
      message:
        type: "string"
        example: "Invalid"
        description: "Info about what went wrong"
    description: "Infpgapiation about the results of the request to the server"
  reviewer:
    required:
    - "emailAddress"
    - "firstName"
    - "lastName"
    - "reputation"
    - "isAdmin"
    properties:
      reviewerID:
        type: "integer"
        example: 1
        description: "Unique ID of the reviewer"
      emailAddress:
        type: "string"
        example: "user@marist.edu"
        description: ":\"Email address of the reviewer\""
      firstName:
        type: "string"
        example: "Alan"
        description: "The first name of the user"
      lastName:
        type: "string"
        example: "labouseur"
        description: "The last name of the user"
      isAdmin:
        type: "boolean"
        example: false
        description: "Denotes wether this user has admin privileges"
      reputation:
        type: "integer"
        example: 93
        description: "The user's ranking as a reviewer"
    example:
      firstName: "Alan"
      lastName: "labouseur"
      emailAddress: "user@marist.edu"
      reviewerID: 1
      isAdmin: false
      reputation: 93
  people_review:
    required:
    - "dateAdded"
    - "reviewerID"
    - "ruleReview"
    - "ruleReviewID"
    properties:
      sentenceID:
        type: "integer"
        example: 1
        description: "Unique ID of the sentence that was submitted for review"
      reviewerID:
        type: "integer"
        example: 1
        description: "Unique ID of the review"
      ruleReviewID:
        type: "integer"
        example: 1
        description: "ID of the rule that is reviewed"
      ruleReview:
        type: "integer"
        example: 1
        description: "Grade given by reviewer to the sentence, 1 for correct, 0 for\
          \ incorect"
      dateAdded:
        type: "string"
        example: "2019-09-24 22:33:19.000"
        description: "Date added to the database"
    example:
      sentenceID: 1
      reviewerID: 1
      ruleReviewID: 1
      ruleReview: 1
      dateAdded: "2019-09-24 22:33:19.000"
  sentence:
    required:
    - "dateAdded"
    - "sentence"
    - "userID"
    properties:
      sentenceID:
        type: "integer"
        example: 1
        description: "Unique ID of the sentence that was submitted for review"
      userID:
        type: "integer"
        example: 1
        description: "Unique ID of the user who submitted the sentence"
      sentence:
        type: "string"
        example: "This is a sentence."
        description: "The user submitted sentence to be reviewed"
      dateAdded:
        type: "string"
        example: "2019-09-24 22:33:19.000"
        description: "Date added to the database"
    example:
      sentence: "This is a sentence."
      sentenceID: 1
      taggedRuleID: 1
      userID: 1
      dateAdded: "2019-09-24 22:33:19.000"
  dataEntry:
    required:
    - "dateAdded"
    - "ruleCorrect"
    - "ruleCorrectID"
    - "sentence"
    - "sentenceID"
    properties:
      sentenceID:
        type: "integer"
        example: 1
        description: "Unique ID of the sentence that was submitted for review"
      sentence:
        type: "string"
        example: "This is a sentence."
        description: "The user submitted sentence to be reviewed"
      ruleCorrectID:
        type: "integer"
        example: 1
        description: "the ID of the rule that graded"
      ruleCorrect:
        type: "integer"
        example: 1
        description: "the consensus on the correctness of the senetence for the rule;\
          \ 1 = correct; 0 = incorrect"
      dateAdded:
        type: "string"
        example: "2019-09-24 22:33:19.000"
        description: "Date added to the database"
    example:
      sentenceID: 1
      sentence: "This is a sentence."
      ruleCorrectID: 1
      ruleCorrect: 1
      dateAdded: "2019-09-24 22:33:19.000"
  rule:
    required:
    - "description"
    - "priority"
    - "ruleName"
    properties:
      ruleID:
        type: "integer"
        example: 1
        description: "Unique ID of the rule"
      ruleName:
        type: "string"
        example: "subject rule"
        description: "name of rule"
      description:
        type: "string"
        example: "issues with the subject of the sentence"
        description: "description of rule"
      priority:
        type: "integer"
        example: 1
        description: "the current value it has towards the dataset, used to get more\
          \ of a ceartin rule"
    example:
      ruleID: 1
      ruleName: "subject rule"
      priority: 0
      description: "issues with the subject of the sentence"
  model_review:
    required:
    - "modelID"
    - "modelVersion"
    - "ruleID"
    - "sentenceID"
    properties:
      sentenceID:
        type: "integer"
        example: 1
        description: "Unique ID of the sentence that was submitted for review"
      ruleID:
        type: "integer"
        example: 1
        description: "Unique ID of the rule"
      modelID:
        type: "integer"
        example: 1
        description: "Unique ID of the model"
      modelVersion:
        type: "integer"
        example: 1
        description: "Version of the model"
    example:
      modelID: 1
      modelVersion: 1
      sentenceID: 1
      ruleID: 1
  sentence_rule:
    required:
    - "status"
    properties:
      sentenceID:
        type: "integer"
        example: 1
        description: "Unique ID of the sentence that was submitted for review"
      taggedRuleID:
        type: "integer"
        example: 1
        description: "the rule tagged for review by the user"
      status:
        type: "string"
        example: "pending"
        description: "the current status of the sentence in its review process"
    example:
      taggedRuleID: 1
      sentenceID: 1
      status: "pending"
  query:
    required:
    - "query"
    properties:
      query:
        type: "string"
        example: "SELECT * FROM TABLE;"
        description: "A select query to be run on the db. Nothing except for SELECT\
          \ queries will be run"
  user_info:
    required:
    - "os"
    - "platform"
    properties:
      os:
        type: "string"
        example: "Mac"
        enum:
        - "Mac"
        - "Windows"
        - "Other"
      platform:
        type: "string"
        example: "isDesktop"
        enum:
        - "isDesktop"
        - "isMobile"
  retrain_info:
    required:
    - "callerID"
    properties:
      callerID:
        type: "string"
        example: "Daniel"