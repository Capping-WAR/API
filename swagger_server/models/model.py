# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Model(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, model_id: int=None, model_version: str=None, bal_accuracy: float=None, is_active: bool=None, date_added: str=None, rule_id: int=None):  # noqa: E501
        """Model - a model defined in Swagger

        :param model_id: The model_id of this Model.  # noqa: E501
        :type model_id: int
        :param model_version: The model_version of this Model.  # noqa: E501
        :type model_version: str
        :param bal_accuracy: The bal_accuracy of this Model.  # noqa: E501
        :type bal_accuracy: float
        :param is_active: The is_active of this Model.  # noqa: E501
        :type is_active: bool
        :param date_added: The date_added of this Model.  # noqa: E501
        :type date_added: str
        :param rule_id: The rule_id of this Model.  # noqa: E501
        :type rule_id: int
        """
        self.swagger_types = {
            'model_id': int,
            'model_version': str,
            'bal_accuracy': float,
            'is_active': bool,
            'date_added': str,
            'rule_id': int
        }

        self.attribute_map = {
            'model_id': 'modelID',
            'model_version': 'modelVersion',
            'bal_accuracy': 'balAccuracy',
            'is_active': 'isActive',
            'date_added': 'dateAdded',
            'rule_id': 'ruleId'
        }

        self._model_id = model_id
        self._model_version = model_version
        self._bal_accuracy = bal_accuracy
        self._is_active = is_active
        self._date_added = date_added
        self._rule_id = rule_id

    @classmethod
    def from_dict(cls, dikt) -> 'Model':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The model of this Model.  # noqa: E501
        :rtype: Model
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_id(self) -> int:
        """Gets the model_id of this Model.

        Unique ID of the model  # noqa: E501

        :return: The model_id of this Model.
        :rtype: int
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id: int):
        """Sets the model_id of this Model.

        Unique ID of the model  # noqa: E501

        :param model_id: The model_id of this Model.
        :type model_id: int
        """

        self._model_id = model_id

    @property
    def model_version(self) -> str:
        """Gets the model_version of this Model.

        Version of the model  # noqa: E501

        :return: The model_version of this Model.
        :rtype: str
        """
        return self._model_version

    @model_version.setter
    def model_version(self, model_version: str):
        """Sets the model_version of this Model.

        Version of the model  # noqa: E501

        :param model_version: The model_version of this Model.
        :type model_version: str
        """
        if model_version is None:
            raise ValueError("Invalid value for `model_version`, must not be `None`")  # noqa: E501

        self._model_version = model_version

    @property
    def bal_accuracy(self) -> float:
        """Gets the bal_accuracy of this Model.

        Percentage Accuracy of the model  # noqa: E501

        :return: The bal_accuracy of this Model.
        :rtype: float
        """
        return self._bal_accuracy

    @bal_accuracy.setter
    def bal_accuracy(self, bal_accuracy: float):
        """Sets the bal_accuracy of this Model.

        Percentage Accuracy of the model  # noqa: E501

        :param bal_accuracy: The bal_accuracy of this Model.
        :type bal_accuracy: float
        """
        if bal_accuracy is None:
            raise ValueError("Invalid value for `bal_accuracy`, must not be `None`")  # noqa: E501

        self._bal_accuracy = bal_accuracy

    @property
    def is_active(self) -> bool:
        """Gets the is_active of this Model.

        is the current model in use for a given rule  # noqa: E501

        :return: The is_active of this Model.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active: bool):
        """Sets the is_active of this Model.

        is the current model in use for a given rule  # noqa: E501

        :param is_active: The is_active of this Model.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")  # noqa: E501

        self._is_active = is_active

    @property
    def date_added(self) -> str:
        """Gets the date_added of this Model.

        Date added to the database  # noqa: E501

        :return: The date_added of this Model.
        :rtype: str
        """
        return self._date_added

    @date_added.setter
    def date_added(self, date_added: str):
        """Sets the date_added of this Model.

        Date added to the database  # noqa: E501

        :param date_added: The date_added of this Model.
        :type date_added: str
        """
        if date_added is None:
            raise ValueError("Invalid value for `date_added`, must not be `None`")  # noqa: E501

        self._date_added = date_added

    @property
    def rule_id(self) -> int:
        """Gets the rule_id of this Model.

        The Rule ID for the corresponding rule in the rules table  # noqa: E501

        :return: The rule_id of this Model.
        :rtype: int
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id: int):
        """Sets the rule_id of this Model.

        The Rule ID for the corresponding rule in the rules table  # noqa: E501

        :param rule_id: The rule_id of this Model.
        :type rule_id: int
        """
        if rule_id is None:
            raise ValueError("Invalid value for `rule_id`, must not be `None`")  # noqa: E501

        self._rule_id = rule_id
