# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UserInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, os: str=None, platform: str=None):  # noqa: E501
        """UserInfo - a model defined in Swagger

        :param os: The os of this UserInfo.  # noqa: E501
        :type os: str
        :param platform: The platform of this UserInfo.  # noqa: E501
        :type platform: str
        """
        self.swagger_types = {
            'os': str,
            'platform': str
        }

        self.attribute_map = {
            'os': 'os',
            'platform': 'platform'
        }

        self._os = os
        self._platform = platform

    @classmethod
    def from_dict(cls, dikt) -> 'UserInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The user_info of this UserInfo.  # noqa: E501
        :rtype: UserInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def os(self) -> str:
        """Gets the os of this UserInfo.


        :return: The os of this UserInfo.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os: str):
        """Sets the os of this UserInfo.


        :param os: The os of this UserInfo.
        :type os: str
        """
        allowed_values = ["Mac", "Windows", "Other"]  # noqa: E501
        if os not in allowed_values:
            raise ValueError(
                "Invalid value for `os` ({0}), must be one of {1}"
                .format(os, allowed_values)
            )

        self._os = os

    @property
    def platform(self) -> str:
        """Gets the platform of this UserInfo.


        :return: The platform of this UserInfo.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform: str):
        """Sets the platform of this UserInfo.


        :param platform: The platform of this UserInfo.
        :type platform: str
        """
        allowed_values = ["isDesktop", "isMobile"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"
                .format(platform, allowed_values)
            )

        self._platform = platform
