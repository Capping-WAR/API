# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ModelReview(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, sentence_id: int=None, rule_id: int=None, model_id: int=None, model_version: int=None):  # noqa: E501
        """ModelReview - a model defined in Swagger

        :param sentence_id: The sentence_id of this ModelReview.  # noqa: E501
        :type sentence_id: int
        :param rule_id: The rule_id of this ModelReview.  # noqa: E501
        :type rule_id: int
        :param model_id: The model_id of this ModelReview.  # noqa: E501
        :type model_id: int
        :param model_version: The model_version of this ModelReview.  # noqa: E501
        :type model_version: int
        """
        self.swagger_types = {
            'sentence_id': int,
            'rule_id': int,
            'model_id': int,
            'model_version': int
        }

        self.attribute_map = {
            'sentence_id': 'sentenceID',
            'rule_id': 'ruleID',
            'model_id': 'modelID',
            'model_version': 'modelVersion'
        }

        self._sentence_id = sentence_id
        self._rule_id = rule_id
        self._model_id = model_id
        self._model_version = model_version

    @classmethod
    def from_dict(cls, dikt) -> 'ModelReview':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The model_review of this ModelReview.  # noqa: E501
        :rtype: ModelReview
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sentence_id(self) -> int:
        """Gets the sentence_id of this ModelReview.

        Unique ID of the sentence that was submitted for review  # noqa: E501

        :return: The sentence_id of this ModelReview.
        :rtype: int
        """
        return self._sentence_id

    @sentence_id.setter
    def sentence_id(self, sentence_id: int):
        """Sets the sentence_id of this ModelReview.

        Unique ID of the sentence that was submitted for review  # noqa: E501

        :param sentence_id: The sentence_id of this ModelReview.
        :type sentence_id: int
        """
        if sentence_id is None:
            raise ValueError("Invalid value for `sentence_id`, must not be `None`")  # noqa: E501

        self._sentence_id = sentence_id

    @property
    def rule_id(self) -> int:
        """Gets the rule_id of this ModelReview.

        Unique ID of the rule  # noqa: E501

        :return: The rule_id of this ModelReview.
        :rtype: int
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id: int):
        """Sets the rule_id of this ModelReview.

        Unique ID of the rule  # noqa: E501

        :param rule_id: The rule_id of this ModelReview.
        :type rule_id: int
        """
        if rule_id is None:
            raise ValueError("Invalid value for `rule_id`, must not be `None`")  # noqa: E501

        self._rule_id = rule_id

    @property
    def model_id(self) -> int:
        """Gets the model_id of this ModelReview.

        Unique ID of the model  # noqa: E501

        :return: The model_id of this ModelReview.
        :rtype: int
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id: int):
        """Sets the model_id of this ModelReview.

        Unique ID of the model  # noqa: E501

        :param model_id: The model_id of this ModelReview.
        :type model_id: int
        """
        if model_id is None:
            raise ValueError("Invalid value for `model_id`, must not be `None`")  # noqa: E501

        self._model_id = model_id

    @property
    def model_version(self) -> int:
        """Gets the model_version of this ModelReview.

        Version of the model  # noqa: E501

        :return: The model_version of this ModelReview.
        :rtype: int
        """
        return self._model_version

    @model_version.setter
    def model_version(self, model_version: int):
        """Sets the model_version of this ModelReview.

        Version of the model  # noqa: E501

        :param model_version: The model_version of this ModelReview.
        :type model_version: int
        """
        if model_version is None:
            raise ValueError("Invalid value for `model_version`, must not be `None`")  # noqa: E501

        self._model_version = model_version
