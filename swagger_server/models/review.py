# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Review(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, reviewer_id: int=None, sentence_id: int=None, rule1: bool=None, rule2: bool=None, rule3: bool=None, rule4: bool=None, rule5: bool=None):  # noqa: E501
        """Review - a model defined in Swagger

        :param reviewer_id: The reviewer_id of this Review.  # noqa: E501
        :type reviewer_id: int
        :param sentence_id: The sentence_id of this Review.  # noqa: E501
        :type sentence_id: int
        :param rule1: The rule1 of this Review.  # noqa: E501
        :type rule1: bool
        :param rule2: The rule2 of this Review.  # noqa: E501
        :type rule2: bool
        :param rule3: The rule3 of this Review.  # noqa: E501
        :type rule3: bool
        :param rule4: The rule4 of this Review.  # noqa: E501
        :type rule4: bool
        :param rule5: The rule5 of this Review.  # noqa: E501
        :type rule5: bool
        """
        self.swagger_types = {
            'reviewer_id': int,
            'sentence_id': int,
            'rule1': bool,
            'rule2': bool,
            'rule3': bool,
            'rule4': bool,
            'rule5': bool
        }

        self.attribute_map = {
            'reviewer_id': 'reviewerID',
            'sentence_id': 'sentenceID',
            'rule1': 'rule1',
            'rule2': 'rule2',
            'rule3': 'rule3',
            'rule4': 'rule4',
            'rule5': 'rule5'
        }

        self._reviewer_id = reviewer_id
        self._sentence_id = sentence_id
        self._rule1 = rule1
        self._rule2 = rule2
        self._rule3 = rule3
        self._rule4 = rule4
        self._rule5 = rule5

    @classmethod
    def from_dict(cls, dikt) -> 'Review':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The review of this Review.  # noqa: E501
        :rtype: Review
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reviewer_id(self) -> int:
        """Gets the reviewer_id of this Review.

        Unique ID of the review  # noqa: E501

        :return: The reviewer_id of this Review.
        :rtype: int
        """
        return self._reviewer_id

    @reviewer_id.setter
    def reviewer_id(self, reviewer_id: int):
        """Sets the reviewer_id of this Review.

        Unique ID of the review  # noqa: E501

        :param reviewer_id: The reviewer_id of this Review.
        :type reviewer_id: int
        """

        self._reviewer_id = reviewer_id

    @property
    def sentence_id(self) -> int:
        """Gets the sentence_id of this Review.

        Unique ID of the sentence that was submitted for review  # noqa: E501

        :return: The sentence_id of this Review.
        :rtype: int
        """
        return self._sentence_id

    @sentence_id.setter
    def sentence_id(self, sentence_id: int):
        """Sets the sentence_id of this Review.

        Unique ID of the sentence that was submitted for review  # noqa: E501

        :param sentence_id: The sentence_id of this Review.
        :type sentence_id: int
        """
        if sentence_id is None:
            raise ValueError("Invalid value for `sentence_id`, must not be `None`")  # noqa: E501

        self._sentence_id = sentence_id

    @property
    def rule1(self) -> bool:
        """Gets the rule1 of this Review.

        Denotes wether this rule was broken by the sentence  # noqa: E501

        :return: The rule1 of this Review.
        :rtype: bool
        """
        return self._rule1

    @rule1.setter
    def rule1(self, rule1: bool):
        """Sets the rule1 of this Review.

        Denotes wether this rule was broken by the sentence  # noqa: E501

        :param rule1: The rule1 of this Review.
        :type rule1: bool
        """
        if rule1 is None:
            raise ValueError("Invalid value for `rule1`, must not be `None`")  # noqa: E501

        self._rule1 = rule1

    @property
    def rule2(self) -> bool:
        """Gets the rule2 of this Review.

        Denotes wether this rule was broken by the sentence  # noqa: E501

        :return: The rule2 of this Review.
        :rtype: bool
        """
        return self._rule2

    @rule2.setter
    def rule2(self, rule2: bool):
        """Sets the rule2 of this Review.

        Denotes wether this rule was broken by the sentence  # noqa: E501

        :param rule2: The rule2 of this Review.
        :type rule2: bool
        """
        if rule2 is None:
            raise ValueError("Invalid value for `rule2`, must not be `None`")  # noqa: E501

        self._rule2 = rule2

    @property
    def rule3(self) -> bool:
        """Gets the rule3 of this Review.

        Denotes wether this rule was broken by the sentence  # noqa: E501

        :return: The rule3 of this Review.
        :rtype: bool
        """
        return self._rule3

    @rule3.setter
    def rule3(self, rule3: bool):
        """Sets the rule3 of this Review.

        Denotes wether this rule was broken by the sentence  # noqa: E501

        :param rule3: The rule3 of this Review.
        :type rule3: bool
        """
        if rule3 is None:
            raise ValueError("Invalid value for `rule3`, must not be `None`")  # noqa: E501

        self._rule3 = rule3

    @property
    def rule4(self) -> bool:
        """Gets the rule4 of this Review.

        Denotes wether this rule was broken by the sentence  # noqa: E501

        :return: The rule4 of this Review.
        :rtype: bool
        """
        return self._rule4

    @rule4.setter
    def rule4(self, rule4: bool):
        """Sets the rule4 of this Review.

        Denotes wether this rule was broken by the sentence  # noqa: E501

        :param rule4: The rule4 of this Review.
        :type rule4: bool
        """
        if rule4 is None:
            raise ValueError("Invalid value for `rule4`, must not be `None`")  # noqa: E501

        self._rule4 = rule4

    @property
    def rule5(self) -> bool:
        """Gets the rule5 of this Review.

        Denotes wether this rule was broken by the sentence  # noqa: E501

        :return: The rule5 of this Review.
        :rtype: bool
        """
        return self._rule5

    @rule5.setter
    def rule5(self, rule5: bool):
        """Sets the rule5 of this Review.

        Denotes wether this rule was broken by the sentence  # noqa: E501

        :param rule5: The rule5 of this Review.
        :type rule5: bool
        """
        if rule5 is None:
            raise ValueError("Invalid value for `rule5`, must not be `None`")  # noqa: E501

        self._rule5 = rule5
