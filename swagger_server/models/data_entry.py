# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class DataEntry(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, sentence_id: int=None, sentence: str=None, rule_correct_id: int=None, rule_correct: int=None, date_added: str=None):  # noqa: E501
        """DataEntry - a model defined in Swagger

        :param sentence_id: The sentence_id of this DataEntry.  # noqa: E501
        :type sentence_id: int
        :param sentence: The sentence of this DataEntry.  # noqa: E501
        :type sentence: str
        :param rule_correct_id: The rule_correct_id of this DataEntry.  # noqa: E501
        :type rule_correct_id: int
        :param rule_correct: The rule_correct of this DataEntry.  # noqa: E501
        :type rule_correct: int
        :param date_added: The date_added of this DataEntry.  # noqa: E501
        :type date_added: str
        """
        self.swagger_types = {
            'sentence_id': int,
            'sentence': str,
            'rule_correct_id': int,
            'rule_correct': int,
            'date_added': str
        }

        self.attribute_map = {
            'sentence_id': 'sentenceID',
            'sentence': 'sentence',
            'rule_correct_id': 'ruleCorrectID',
            'rule_correct': 'ruleCorrect',
            'date_added': 'dateAdded'
        }

        self._sentence_id = sentence_id
        self._sentence = sentence
        self._rule_correct_id = rule_correct_id
        self._rule_correct = rule_correct
        self._date_added = date_added

    @classmethod
    def from_dict(cls, dikt) -> 'DataEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The dataEntry of this DataEntry.  # noqa: E501
        :rtype: DataEntry
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sentence_id(self) -> int:
        """Gets the sentence_id of this DataEntry.

        Unique ID of the sentence that was submitted for review  # noqa: E501

        :return: The sentence_id of this DataEntry.
        :rtype: int
        """
        return self._sentence_id

    @sentence_id.setter
    def sentence_id(self, sentence_id: int):
        """Sets the sentence_id of this DataEntry.

        Unique ID of the sentence that was submitted for review  # noqa: E501

        :param sentence_id: The sentence_id of this DataEntry.
        :type sentence_id: int
        """
        if sentence_id is None:
            raise ValueError("Invalid value for `sentence_id`, must not be `None`")  # noqa: E501

        self._sentence_id = sentence_id

    @property
    def sentence(self) -> str:
        """Gets the sentence of this DataEntry.

        The user submitted sentence to be reviewed  # noqa: E501

        :return: The sentence of this DataEntry.
        :rtype: str
        """
        return self._sentence

    @sentence.setter
    def sentence(self, sentence: str):
        """Sets the sentence of this DataEntry.

        The user submitted sentence to be reviewed  # noqa: E501

        :param sentence: The sentence of this DataEntry.
        :type sentence: str
        """
        if sentence is None:
            raise ValueError("Invalid value for `sentence`, must not be `None`")  # noqa: E501

        self._sentence = sentence

    @property
    def rule_correct_id(self) -> int:
        """Gets the rule_correct_id of this DataEntry.

        the ID of the rule that graded  # noqa: E501

        :return: The rule_correct_id of this DataEntry.
        :rtype: int
        """
        return self._rule_correct_id

    @rule_correct_id.setter
    def rule_correct_id(self, rule_correct_id: int):
        """Sets the rule_correct_id of this DataEntry.

        the ID of the rule that graded  # noqa: E501

        :param rule_correct_id: The rule_correct_id of this DataEntry.
        :type rule_correct_id: int
        """
        if rule_correct_id is None:
            raise ValueError("Invalid value for `rule_correct_id`, must not be `None`")  # noqa: E501

        self._rule_correct_id = rule_correct_id

    @property
    def rule_correct(self) -> int:
        """Gets the rule_correct of this DataEntry.

        the consensus on the correctness of the senetence for the rule; 1 = correct; 0 = incorrect  # noqa: E501

        :return: The rule_correct of this DataEntry.
        :rtype: int
        """
        return self._rule_correct

    @rule_correct.setter
    def rule_correct(self, rule_correct: int):
        """Sets the rule_correct of this DataEntry.

        the consensus on the correctness of the senetence for the rule; 1 = correct; 0 = incorrect  # noqa: E501

        :param rule_correct: The rule_correct of this DataEntry.
        :type rule_correct: int
        """
        if rule_correct is None:
            raise ValueError("Invalid value for `rule_correct`, must not be `None`")  # noqa: E501

        self._rule_correct = rule_correct

    @property
    def date_added(self) -> str:
        """Gets the date_added of this DataEntry.

        Date added to the database  # noqa: E501

        :return: The date_added of this DataEntry.
        :rtype: str
        """
        return self._date_added

    @date_added.setter
    def date_added(self, date_added: str):
        """Sets the date_added of this DataEntry.

        Date added to the database  # noqa: E501

        :param date_added: The date_added of this DataEntry.
        :type date_added: str
        """
        if date_added is None:
            raise ValueError("Invalid value for `date_added`, must not be `None`")  # noqa: E501

        self._date_added = date_added
