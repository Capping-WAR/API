# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Sentence(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, sentence_id: int=None, user_id: int=None, tagged_rule_id: int=None, sentence: str=None, date_added: str=None):  # noqa: E501
        """Sentence - a model defined in Swagger

        :param sentence_id: The sentence_id of this Sentence.  # noqa: E501
        :type sentence_id: int
        :param user_id: The user_id of this Sentence.  # noqa: E501
        :type user_id: int
        :param tagged_rule_id: The tagged_rule_id of this Sentence.  # noqa: E501
        :type tagged_rule_id: int
        :param sentence: The sentence of this Sentence.  # noqa: E501
        :type sentence: str
        :param date_added: The date_added of this Sentence.  # noqa: E501
        :type date_added: str
        """
        self.swagger_types = {
            'sentence_id': int,
            'user_id': int,
            'tagged_rule_id': int,
            'sentence': str,
            'date_added': str
        }

        self.attribute_map = {
            'sentence_id': 'sentenceID',
            'user_id': 'userID',
            'tagged_rule_id': 'taggedRuleID',
            'sentence': 'sentence',
            'date_added': 'dateAdded'
        }

        self._sentence_id = sentence_id
        self._user_id = user_id
        self._tagged_rule_id = tagged_rule_id
        self._sentence = sentence
        self._date_added = date_added

    @classmethod
    def from_dict(cls, dikt) -> 'Sentence':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The sentence of this Sentence.  # noqa: E501
        :rtype: Sentence
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sentence_id(self) -> int:
        """Gets the sentence_id of this Sentence.

        Unique ID of the sentence that was submitted for review  # noqa: E501

        :return: The sentence_id of this Sentence.
        :rtype: int
        """
        return self._sentence_id

    @sentence_id.setter
    def sentence_id(self, sentence_id: int):
        """Sets the sentence_id of this Sentence.

        Unique ID of the sentence that was submitted for review  # noqa: E501

        :param sentence_id: The sentence_id of this Sentence.
        :type sentence_id: int
        """

        self._sentence_id = sentence_id

    @property
    def user_id(self) -> int:
        """Gets the user_id of this Sentence.

        Unique ID of the user who submitted the sentence  # noqa: E501

        :return: The user_id of this Sentence.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this Sentence.

        Unique ID of the user who submitted the sentence  # noqa: E501

        :param user_id: The user_id of this Sentence.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def tagged_rule_id(self) -> int:
        """Gets the tagged_rule_id of this Sentence.

        the rule tagged for review by the user  # noqa: E501

        :return: The tagged_rule_id of this Sentence.
        :rtype: int
        """
        return self._tagged_rule_id

    @tagged_rule_id.setter
    def tagged_rule_id(self, tagged_rule_id: int):
        """Sets the tagged_rule_id of this Sentence.

        the rule tagged for review by the user  # noqa: E501

        :param tagged_rule_id: The tagged_rule_id of this Sentence.
        :type tagged_rule_id: int
        """
        if tagged_rule_id is None:
            raise ValueError("Invalid value for `tagged_rule_id`, must not be `None`")  # noqa: E501

        self._tagged_rule_id = tagged_rule_id

    @property
    def sentence(self) -> str:
        """Gets the sentence of this Sentence.

        The user submitted sentence to be reviewed  # noqa: E501

        :return: The sentence of this Sentence.
        :rtype: str
        """
        return self._sentence

    @sentence.setter
    def sentence(self, sentence: str):
        """Sets the sentence of this Sentence.

        The user submitted sentence to be reviewed  # noqa: E501

        :param sentence: The sentence of this Sentence.
        :type sentence: str
        """
        if sentence is None:
            raise ValueError("Invalid value for `sentence`, must not be `None`")  # noqa: E501

        self._sentence = sentence

    @property
    def date_added(self) -> str:
        """Gets the date_added of this Sentence.

        Date added to the database  # noqa: E501

        :return: The date_added of this Sentence.
        :rtype: str
        """
        return self._date_added

    @date_added.setter
    def date_added(self, date_added: str):
        """Sets the date_added of this Sentence.

        Date added to the database  # noqa: E501

        :param date_added: The date_added of this Sentence.
        :type date_added: str
        """
        if date_added is None:
            raise ValueError("Invalid value for `date_added`, must not be `None`")  # noqa: E501

        self._date_added = date_added
