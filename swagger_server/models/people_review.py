# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PeopleReview(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, sentence_id: int=None, reviewer_id: int=None, rule_review_id: int=None, rule_review: int=None, date_added: str=None):  # noqa: E501
        """PeopleReview - a model defined in Swagger

        :param sentence_id: The sentence_id of this PeopleReview.  # noqa: E501
        :type sentence_id: int
        :param reviewer_id: The reviewer_id of this PeopleReview.  # noqa: E501
        :type reviewer_id: int
        :param rule_review_id: The rule_review_id of this PeopleReview.  # noqa: E501
        :type rule_review_id: int
        :param rule_review: The rule_review of this PeopleReview.  # noqa: E501
        :type rule_review: int
        :param date_added: The date_added of this PeopleReview.  # noqa: E501
        :type date_added: str
        """
        self.swagger_types = {
            'sentence_id': int,
            'reviewer_id': int,
            'rule_review_id': int,
            'rule_review': int,
            'date_added': str
        }

        self.attribute_map = {
            'sentence_id': 'sentenceID',
            'reviewer_id': 'reviewerID',
            'rule_review_id': 'ruleReviewID',
            'rule_review': 'ruleReview',
            'date_added': 'dateAdded'
        }

        self._sentence_id = sentence_id
        self._reviewer_id = reviewer_id
        self._rule_review_id = rule_review_id
        self._rule_review = rule_review
        self._date_added = date_added

    @classmethod
    def from_dict(cls, dikt) -> 'PeopleReview':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The people_review of this PeopleReview.  # noqa: E501
        :rtype: PeopleReview
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sentence_id(self) -> int:
        """Gets the sentence_id of this PeopleReview.

        Unique ID of the sentence that was submitted for review  # noqa: E501

        :return: The sentence_id of this PeopleReview.
        :rtype: int
        """
        return self._sentence_id

    @sentence_id.setter
    def sentence_id(self, sentence_id: int):
        """Sets the sentence_id of this PeopleReview.

        Unique ID of the sentence that was submitted for review  # noqa: E501

        :param sentence_id: The sentence_id of this PeopleReview.
        :type sentence_id: int
        """

        self._sentence_id = sentence_id

    @property
    def reviewer_id(self) -> int:
        """Gets the reviewer_id of this PeopleReview.

        Unique ID of the review  # noqa: E501

        :return: The reviewer_id of this PeopleReview.
        :rtype: int
        """
        return self._reviewer_id

    @reviewer_id.setter
    def reviewer_id(self, reviewer_id: int):
        """Sets the reviewer_id of this PeopleReview.

        Unique ID of the review  # noqa: E501

        :param reviewer_id: The reviewer_id of this PeopleReview.
        :type reviewer_id: int
        """
        if reviewer_id is None:
            raise ValueError("Invalid value for `reviewer_id`, must not be `None`")  # noqa: E501

        self._reviewer_id = reviewer_id

    @property
    def rule_review_id(self) -> int:
        """Gets the rule_review_id of this PeopleReview.

        ID of the rule that is reviewed  # noqa: E501

        :return: The rule_review_id of this PeopleReview.
        :rtype: int
        """
        return self._rule_review_id

    @rule_review_id.setter
    def rule_review_id(self, rule_review_id: int):
        """Sets the rule_review_id of this PeopleReview.

        ID of the rule that is reviewed  # noqa: E501

        :param rule_review_id: The rule_review_id of this PeopleReview.
        :type rule_review_id: int
        """
        if rule_review_id is None:
            raise ValueError("Invalid value for `rule_review_id`, must not be `None`")  # noqa: E501

        self._rule_review_id = rule_review_id

    @property
    def rule_review(self) -> int:
        """Gets the rule_review of this PeopleReview.

        Grade given by reviewer to the sentence, 1 for correct, 0 for incorect  # noqa: E501

        :return: The rule_review of this PeopleReview.
        :rtype: int
        """
        return self._rule_review

    @rule_review.setter
    def rule_review(self, rule_review: int):
        """Sets the rule_review of this PeopleReview.

        Grade given by reviewer to the sentence, 1 for correct, 0 for incorect  # noqa: E501

        :param rule_review: The rule_review of this PeopleReview.
        :type rule_review: int
        """
        if rule_review is None:
            raise ValueError("Invalid value for `rule_review`, must not be `None`")  # noqa: E501

        self._rule_review = rule_review

    @property
    def date_added(self) -> str:
        """Gets the date_added of this PeopleReview.

        Date added to the database  # noqa: E501

        :return: The date_added of this PeopleReview.
        :rtype: str
        """
        return self._date_added

    @date_added.setter
    def date_added(self, date_added: str):
        """Sets the date_added of this PeopleReview.

        Date added to the database  # noqa: E501

        :param date_added: The date_added of this PeopleReview.
        :type date_added: str
        """
        if date_added is None:
            raise ValueError("Invalid value for `date_added`, must not be `None`")  # noqa: E501

        self._date_added = date_added
